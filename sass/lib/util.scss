$-restyle--directive-prefix: ("@restyle.", "restyle-");
$-restyle--selector-chars: ("[", "*", "#", ".", "&", ":", " ");

@function -restyle--timer-for-logging($type, $time: null) {
  @return if(-restyle--is-logging-enabled($type), -restyle--timer-js($time), 0ms);
}

/// @alias    multiple-values
@function -restyle--multiple-values($values...) {
  @return (
    "#{nth($-restyle--directive-prefix, 1)}multivalue": $values
  );
}

/// deep merge a Sass Map
/// @param    {Map} $destination - the Map to merge into
/// @param    {Map} $source - the Map to merge from
/// @returns  {Map} the merged map
@function -restyle--map-merge-deep($destination, $source: ()){
  @if type-of($source) != map {
    @return $destination;
  }

  @each $key, $value in $source {
    // if the destination already has a a value, and the values are both maps...
    $current-value: map-get($destination, $key);
    @if ((type-of($current-value) == map) and (type-of($value) == map)) {
      // recursively merge the values
      $value: -restyle--map-merge-deep($current-value, $value);
    }

    // merge these values back into the destination
    $destination: map-merge($destination, (
      #{$key}: $value
    ));
  }

  @return $destination;
}

/// whether or not logging is enabled
/// @param    {String} $type - the type of logging to check
/// @returns  {Boolean} whether or not logging is enabled
@function -restyle--is-logging-enabled($type) {
  @if (not map-has-key($-restyle--logging-enabled-cache, $type)) {
    $-restyle--logging-enabled-cache: map-merge($-restyle--logging-enabled-cache, (
      $type: -restyle--is-logging-enabled-js($type, -restyle--config(log))
    )) !global;
  }

  @return map-get($-restyle--logging-enabled-cache, $type);
}

/// casts an incoming values to a list of arguments
/// @param    {*} $args - the value(s) to cast to args
/// @returns  {List} the list of arguments
@function -restyle--cast-to-args($args) {
  // if it's not a comma separated list, cast it to one...
  @if (type-of($args) != list or list-separator($args) == space) {
    @return ($args,);
  }
  @return $args;
}

/// helper for logging messages
/// @param    {String} $message - the message to log
/// @param    {String} $type - the type of log message
/// @param    {Map} $data - the data to substitute into the $message
/// @param    {String} $severity - the serverity of the message being logged
/// @param    {Boolean} $silent - if `true`, will not output the message
/// @returns  {String} the message
@function -restyle--log($message, $type: null, $data: (), $severity: log, $silent: false) {

  // if a type is set, make sure the type logging is enabled
  @if ($type and not -restyle--is-logging-enabled($type)) {
    @return null;
  }

  // adjust the type
  $type: if($type, "restyle:#{$type}", "restyle");

  // adjust the message
  $message: "[#{$type}] #{if($data, -restyle--str-substitute-js($message, $data), $message)}";

  // log based on severity
  @if (not $silent) {
    @if ($severity == warn) {
      @warn $message;
    }
    @else if ($severity != silent) {
      @debug $message;
    }
  }

  @return $message;
}

/// whether or not the value is a multivalue
/// @param    {*} $value - the value to check
/// @returns  {Boolean} - whether or not the value is a multivalue
@function -restyle--is-multivalue($value) {
  @return (type-of($value) == map and map-has-key($value, "@restyle.multivalue"));
}

/// @alias    get-multiple-values
@function -restyle--get-multiple-values($value) {
  @if -restyle--is-multivalue($value) {
    // iterate over each value
    @return map-get($value, "@restyle.multivalue");
  }
  @else {
    @return append((), $value, comma);
  }
}

$restyle-current-value: null !default;
/// @alias    with-multiple-values
@mixin -restyle--with-multiple-values($value) {
  $value: -restyle--get-multiple-values($value);
  @each $val in $value {
    $previous-value: $restyle-current-value;
    $restyle-current-value: $val !global;
    @content;
    $restyle-current-value: $previous-value !global;
  }
}

/// a helper mixin for measuring the time it takes to do stuff
/// @content
/// @param    {String} $name - the name of the timer
/// @param    {String} $message - the message to log (must contain a `{time}` placeholder)
@mixin -restyle--log-time($name: generic, $message: "elapsed time: {time}") {
  $type: "time:#{$name}";

  $start-time: -restyle--timer-for-logging($type);

  @content;

  $tmp: -restyle--log($message, $type, (
    time: -restyle--timer-for-logging($type, $start-time)
  ));
}

@function -restyle--normalize-property($property) {
  // @return -restyle--normalize-property-js($property);
  $property: -restyle--str-trim-from-char($property, "{");
  $property: -restyle--str-trim-from-char($property, "\\");
  @return $property;
}

@function -restyle--str-trim-from-char($str, $char, $including: true) {
  $idx: str-index($str, $char);
  @if ($idx != null) {
    $offset: if($including, 1, 0);
    @return str-slice($str, 0, ($idx - $offset));
  }
  @return $str;
}


@function -restyle--get-directive($str) {
  // @return -restyle--get-directive-js($str);
  @each $prefix in $-restyle--directive-prefix {
    $idx: str-index($str, $prefix);
    @if $idx == 1 {
      @return str-slice($str, str-length($prefix) + 1, -1);
    }
  }

  @return false;
}

@function -restyle--is-selector($str) {
  // @return -restyle--is-selector-js($str);
  @each $char in $-restyle--selector-chars {
    @if (str-index($str, $char) != null) {
      @return true;
    }
  }
  @return false;
}

@function -restyle--kvargs($kvargs...) {
  $kwargs: keywords($kvargs);
  $args: ();

  @if (length($kvargs) > 0) {
    @for $i from 1 through length($kvargs) {
      $args: append($args, nth($kvargs, $i));
    }
  }

  @return (
    args: $args,
    kwargs: $kwargs
  );
}
